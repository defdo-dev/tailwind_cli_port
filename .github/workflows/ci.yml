name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  MIX_ENV: test

jobs:
  test:
    name: Test (Elixir ${{ matrix.elixir }} / OTP ${{ matrix.otp }})
    runs-on: n100
     strategy:
      matrix:
        otp: ['25']
        elixir: ['1.15']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ matrix.elixir }}
        otp-version: ${{ matrix.otp }}

    - name: Cache deps
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-

    - name: Install dependencies
      run: mix deps.get

    - name: Check code formatting
      run: mix format --check-formatted

    - name: Run Credo
      run: mix credo --strict

    - name: Compile with warnings as errors
      run: mix compile --warnings-as-errors

    - name: Run tests
      run: mix test --trace

    - name: Generate coverage report
      run: mix coveralls.json
      if: matrix.elixir == '1.17' && matrix.otp == '27'

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.elixir == '1.17' && matrix.otp == '27'
      with:
        file: ./cover/excoveralls.json
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  dialyzer:
    name: Dialyzer
    runs-on: n100
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.17'
        otp-version: '27'
        version-type: loose

    - name: Cache deps
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-dialyzer-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-dialyzer-

    - name: Cache PLTs
      uses: actions/cache@v4
      with:
        path: priv/plts
        key: ${{ runner.os }}-plt-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-plt-

    - name: Install dependencies
      run: mix deps.get

    - name: Run Dialyzer
      run: mix dialyzer

  docs:
    name: Documentation
    runs-on: n100
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.17'
        otp-version: '27'
        version-type: loose

    - name: Cache deps
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-docs-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-docs-

    - name: Install dependencies
      run: mix deps.get

    - name: Generate documentation
      run: mix docs

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: doc/
        retention-days: 30

  security:
    name: Security Audit
    runs-on: n100
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.17'
        otp-version: '27'
        version-type: loose

    - name: Cache deps
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-security-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-security-

    - name: Install dependencies
      run: mix deps.get

    - name: Security audit
      run: mix deps.audit

    - name: Check for unused dependencies
      run: mix deps.unlock --check-unused

  functional-test:
    name: Functional Tests
    runs-on: n100
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.17'
        otp-version: '27'
        version-type: loose

    - name: Cache deps
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-functional-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-functional-

    - name: Install dependencies
      run: mix deps.get

    - name: Test Tailwind binary download
      run: |
        mix run -e "
          case Defdo.TailwindDownload.install() do
            :ok -> IO.puts(\"✓ Binary download successful\")
            {:error, reason} -> 
              IO.puts(\"✗ Binary download failed: #{inspect(reason)}\")
              System.halt(1)
          end
        "

    - name: Test CSS compilation
      run: |
        mkdir -p test_assets/css
        echo '@tailwind base; @tailwind components; @tailwind utilities;' > test_assets/input.css
        mix run -e "
          {:ok, pid} = Defdo.TailwindPort.start_link(
            opts: ['-i', 'test_assets/input.css', '-o', 'test_assets/output.css']
          )
          case Defdo.TailwindPort.wait_until_ready(pid, 30_000) do
            :ok -> 
              IO.puts(\"✓ CSS compilation successful\")
              GenServer.stop(pid)
            {:error, :timeout} -> 
              IO.puts(\"✗ CSS compilation timed out\")
              GenServer.stop(pid)
              System.halt(1)
          end
        "

    - name: Verify output file
      run: |
        if [ -f "test_assets/output.css" ] && [ -s "test_assets/output.css" ]; then
          echo "✓ Output CSS file created and non-empty"
          echo "File size: $(wc -c < test_assets/output.css) bytes"
        else
          echo "✗ Output CSS file missing or empty"
          exit 1
        fi

  notify-discord:
    name: Discord Notification
    runs-on: n100
    needs: [test, dialyzer, docs, security, functional-test]
    if: always() && github.event_name == 'push'
    steps:
    - name: Send Discord notification on success
      if: ${{ needs.test.result == 'success' && needs.dialyzer.result == 'success' && needs.docs.result == 'success' && needs.security.result == 'success' && needs.functional-test.result == 'success' }}
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        args: |
          ✅ **CI Pipeline Success** - TailwindPort
          
          **Branch:** `${{ github.ref_name }}`
          **Commit:** `${{ github.sha }}`
          **Author:** ${{ github.actor }}
          **Message:** ${{ github.event.head_commit.message }}
          
          🧪 All tests passed
          🔍 Code quality checks passed
          📚 Documentation generated
          🔒 Security audit passed
          ⚡ Functional tests passed
          
          [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

    - name: Send Discord notification on failure
      if: ${{ needs.test.result == 'failure' || needs.dialyzer.result == 'failure' || needs.docs.result == 'failure' || needs.security.result == 'failure' || needs.functional-test.result == 'failure' }}
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        args: |
          ❌ **CI Pipeline Failed** - TailwindPort
          
          **Branch:** `${{ github.ref_name }}`
          **Commit:** `${{ github.sha }}`
          **Author:** ${{ github.actor }}
          **Message:** ${{ github.event.head_commit.message }}
          
          **Failed Jobs:**
          ${{ needs.test.result == 'failure' && '❌ Tests' || '✅ Tests' }}
          ${{ needs.dialyzer.result == 'failure' && '❌ Dialyzer' || '✅ Dialyzer' }}
          ${{ needs.docs.result == 'failure' && '❌ Documentation' || '✅ Documentation' }}
          ${{ needs.security.result == 'failure' && '❌ Security' || '✅ Security' }}
          ${{ needs.functional-test.result == 'failure' && '❌ Functional Tests' || '✅ Functional Tests' }}
          
          [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

    - name: Send Discord notification on partial success
      if: ${{ !cancelled() && (needs.test.result == 'success' || needs.dialyzer.result == 'success' || needs.docs.result == 'success' || needs.security.result == 'success' || needs.functional-test.result == 'success') && (needs.test.result == 'failure' || needs.dialyzer.result == 'failure' || needs.docs.result == 'failure' || needs.security.result == 'failure' || needs.functional-test.result == 'failure') }}
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        args: |
          ⚠️ **CI Pipeline Partial Success** - TailwindPort
          
          **Branch:** `${{ github.ref_name }}`
          **Commit:** `${{ github.sha }}`
          **Author:** ${{ github.actor }}
          
          Some jobs succeeded, others failed. Please check the details.
          
          [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})