name: Release

on:
  push:
    tags:
      - 'v*'

env:
  MIX_ENV: prod

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      is_prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"

    - name: Check if prerelease
      id: check_prerelease
      run: |
        VERSION=${{ steps.get_version.outputs.version }}
        if [[ $VERSION =~ -[a-zA-Z0-9]+ ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "This is a prerelease version"
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
          echo "This is a stable release"
        fi

    - name: Setup Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.17'
        otp-version: '27'
        version-type: strict

    - name: Validate version in mix.exs
      run: |
        TAG_VERSION="${{ steps.get_version.outputs.version }}"
        MIX_VERSION=$(grep -o 'version: "[^"]*"' mix.exs | cut -d'"' -f2)
        
        if [ "$TAG_VERSION" != "$MIX_VERSION" ]; then
          echo "‚ùå Version mismatch: tag=$TAG_VERSION, mix.exs=$MIX_VERSION"
          exit 1
        fi
        
        echo "‚úÖ Version validation passed: $TAG_VERSION"

  test:
    name: Release Tests
    runs-on: ubuntu-latest
    needs: validate-tag
    strategy:
      matrix:
        include:
          - elixir: '1.15'
            otp: '25'
          - elixir: '1.17'
            otp: '27'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ matrix.elixir }}
        otp-version: ${{ matrix.otp }}
        version-type: strict

    - name: Cache deps
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-release-${{ matrix.elixir }}-${{ matrix.otp }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-release-${{ matrix.elixir }}-${{ matrix.otp }}-

    - name: Install dependencies
      run: mix deps.get

    - name: Run full test suite
      run: mix test --include slow

    - name: Check code quality
      run: |
        mix format --check-formatted
        mix credo --strict
        mix compile --warnings-as-errors

    - name: Run Dialyzer
      run: mix dialyzer
      if: matrix.elixir == '1.17' && matrix.otp == '27'

  build-package:
    name: Build Release Package
    runs-on: ubuntu-latest
    needs: [validate-tag, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.17'
        otp-version: '27'
        version-type: strict

    - name: Cache deps
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-package-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-package-

    - name: Install dependencies
      run: mix deps.get --only prod

    - name: Compile for production
      run: mix compile

    - name: Build documentation
      run: mix docs

    - name: Create hex package
      run: mix hex.build

    - name: Upload package artifact
      uses: actions/upload-artifact@v4
      with:
        name: hex-package
        path: "*.tar"
        retention-days: 30

    - name: Upload documentation artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-documentation
        path: doc/
        retention-days: 90

  publish-hex:
    name: Publish to Hex.pm
    runs-on: ubuntu-latest
    needs: [validate-tag, build-package]
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.17'
        otp-version: '27'
        version-type: strict

    - name: Cache deps
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-publish-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-publish-

    - name: Install dependencies
      run: mix deps.get --only prod

    - name: Publish to Hex.pm
      env:
        HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
      run: |
        echo "Publishing version ${{ needs.validate-tag.outputs.version }} to Hex.pm"
        mix hex.publish --yes

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-tag, publish-hex]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download package artifact
      uses: actions/download-artifact@v4
      with:
        name: hex-package
        path: ./artifacts

    - name: Download documentation
      uses: actions/download-artifact@v4
      with:
        name: release-documentation
        path: ./doc

    - name: Create documentation archive
      run: |
        cd doc
        tar -czf ../artifacts/documentation-${{ needs.validate-tag.outputs.version }}.tar.gz *
        cd ..

    - name: Generate changelog for release
      id: changelog
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          CHANGELOG="Initial release"
        else
          echo "Getting changelog since $LAST_TAG"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD | head -20)
          
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="Version bump and maintenance updates"
          fi
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.validate-tag.outputs.version }}
        name: Release v${{ needs.validate-tag.outputs.version }}
        body: |
          ## Release v${{ needs.validate-tag.outputs.version }}
          
          ### Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ### Installation
          
          Add to your `mix.exs`:
          
          ```elixir
          def deps do
            [
              {:tailwind_port, "~> ${{ needs.validate-tag.outputs.version }}"}
            ]
          end
          ```
          
          ### Documentation
          
          - [Hex.pm Documentation](https://hexdocs.pm/tailwind_port/${{ needs.validate-tag.outputs.version }})
          - [GitHub Repository](https://github.com/defdo-dev/tailwind_cli_port)
          
          ### Package Verification
          
          ```bash
          mix hex.info tailwind_port ${{ needs.validate-tag.outputs.version }}
          ```
        files: |
          artifacts/*.tar
          artifacts/documentation-*.tar.gz
        prerelease: ${{ needs.validate-tag.outputs.is_prerelease == 'true' }}
        draft: false

  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [validate-tag, create-github-release]
    if: success()
    steps:
    - name: Success notification
      run: |
        echo "üéâ Release v${{ needs.validate-tag.outputs.version }} published successfully!"
        echo "üì¶ Package: https://hex.pm/packages/tailwind_port"
        echo "üìö Docs: https://hexdocs.pm/tailwind_port/${{ needs.validate-tag.outputs.version }}"
        echo "üè∑Ô∏è GitHub: https://github.com/defdo-dev/tailwind_cli_port/releases/tag/v${{ needs.validate-tag.outputs.version }}"

  notify-discord-success:
    name: Discord Release Success Notification
    runs-on: ubuntu-latest
    needs: [validate-tag, create-github-release]
    if: success()
    steps:
    - name: Send Discord success notification
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        args: |
          üéâ **Release Published Successfully** - TailwindPort v${{ needs.validate-tag.outputs.version }}
          
          **Version:** `v${{ needs.validate-tag.outputs.version }}`
          **Type:** ${{ needs.validate-tag.outputs.is_prerelease == 'true' && 'Pre-release' || 'Stable Release' }}
          **Author:** ${{ github.actor }}
          
          üì¶ **Package:** https://hex.pm/packages/tailwind_port
          üìö **Documentation:** https://hexdocs.pm/tailwind_port/${{ needs.validate-tag.outputs.version }}
          üè∑Ô∏è **GitHub Release:** https://github.com/defdo-dev/tailwind_cli_port/releases/tag/v${{ needs.validate-tag.outputs.version }}
          
          **Installation:**
          ```elixir
          def deps do
            [
              {:tailwind_port, "~> ${{ needs.validate-tag.outputs.version }}"}
            ]
          end
          ```
          
          Ready for production use! üöÄ

  notify-discord-failure:
    name: Discord Release Failure Notification
    runs-on: ubuntu-latest
    needs: [validate-tag, test, build-package, publish-hex, create-github-release]
    if: failure()
    steps:
    - name: Send Discord failure notification
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        args: |
          ‚ùå **Release Failed** - TailwindPort v${{ needs.validate-tag.outputs.version }}
          
          **Version:** `v${{ needs.validate-tag.outputs.version }}`
          **Author:** ${{ github.actor }}
          
          **Failed Jobs:**
          ${{ needs.test.result == 'failure' && '‚ùå Tests' || '‚úÖ Tests' }}
          ${{ needs.build-package.result == 'failure' && '‚ùå Package Build' || '‚úÖ Package Build' }}
          ${{ needs.publish-hex.result == 'failure' && '‚ùå Hex.pm Publish' || '‚úÖ Hex.pm Publish' }}
          ${{ needs.create-github-release.result == 'failure' && '‚ùå GitHub Release' || '‚úÖ GitHub Release' }}
          
          Please check the workflow logs and fix any issues.
          
          [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

  notify-failure:
    name: Notify Release Failure
    runs-on: ubuntu-latest
    needs: [validate-tag, test, build-package, publish-hex, create-github-release]
    if: failure()
    steps:
    - name: Failure notification
      run: |
        echo "‚ùå Release v${{ needs.validate-tag.outputs.version }} failed!"
        echo "Please check the workflow logs and fix any issues."
        exit 1